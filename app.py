# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QHmOefZ6kpC0y5BpwcEUi23tGdWKpEkC
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import plotly.express as px
import plotly.graph_objects as go

# Set page config
st.set_page_config(
    page_title="Student Outcome Predictor",
    page_icon="🎓",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .prediction-box {
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        text-align: center;
    }
    .enrolled { background-color: #d4edda; border-left: 5px solid #28a745; }
    .dropout { background-color: #f8d7da; border-left: 5px solid #dc3545; }
    .graduate { background-color: #d1ecf1; border-left: 5px solid #17a2b8; }
    .metric-box {
        background-color: #ffffff;
        border: 2px solid #e9ecef;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .metric-box h4 {
        color: #495057;
        font-size: 1rem;
        margin-bottom: 0.5rem;
        font-weight: 600;
    }
    .metric-box h2 {
        color: #212529;
        font-size: 2rem;
        margin: 0;
        font-weight: bold;
    }
    .enrolled-metric {
        border-left: 4px solid #28a745;
        background-color: #f8fff9;
    }
    .dropout-metric {
        border-left: 4px solid #dc3545;
        background-color: #fff8f8;
    }
    .graduate-metric {
        border-left: 4px solid #17a2b8;
        background-color: #f8fcfd;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_model():
    """Load the trained model and info"""
    try:
        pipeline = joblib.load('best_model_pipeline.joblib')
        model_info = joblib.load('model_info.joblib')
        label_encoders = joblib.load('label_encoders.joblib')
        encoding_mappings = joblib.load('encoding_mappings.joblib')
        return pipeline, model_info, label_encoders, encoding_mappings
    except FileNotFoundError as e:
        st.error(f"Model files not found! Please make sure all .joblib files are in the same directory. Missing: {e}")
        st.stop()

# Load model and components
pipeline, model_info, label_encoders, encoding_mappings = load_model()

# Define categorical mappings (from your provided data)
categorical_mappings = {
    'application_mode': {
        0: "1st phase - general contingent",
        1: "Ordinance No. 612/93",
        2: "1st phase - special contingent (Azores Island)",
        3: "Holders of other higher courses",
        4: "Ordinance No. 854-B/99",
        5: "International student (bachelor)",
        6: "1st phase - special contingent (Madeira Island)",
        7: "2nd phase - general contingent",
        8: "3rd phase - general contingent",
        9: "Ordinance No. 533-A/99, item b2) (Different Plan)",
        10: "Ordinance No. 533-A/99, item b3 (Other Institution)",
        11: "Over 23 years old",
        12: "Transfer",
        13: "Change of course",
        14: "Technological specialization diploma holders",
        15: "Change of institution/course",
        16: "Short cycle diploma holders",
        17: "Change of institution/course (International)"
    },
    'daytime_evening_attendance': {
        1: "Daytime",
        0: "Evening"
    },
    'previous_qualification': {
        0: "Basic education 2nd cycle (6th/7th/8th year) or equiv.",
        1: "Basic education 3rd cycle (9th/10th/11th year) or equiv.",
        2: "10th year of schooling - not completed",
        3: "10th year of schooling",
        4: "11th year of schooling - not completed",
        5: "Other - 11th year of schooling",
        6: "12th year of schooling - not completed",
        7: "Secondary education",
        8: "Frequency of higher education",
        9: "Technological specialization course",
        10: "Professional higher technical course",
        11: "Higher education - degree (1st cycle)",
        12: "Higher education - bachelor's degree",
        13: "Higher education - degree",
        14: "Higher education - master (2nd cycle)",
        15: "Higher education - master's",
        16: "Higher education - doctorate"
    },
    'mothers_qualification': {
        0: "Can't read or write",
        1: "Can read without having a 4th year of schooling",
        2: "Basic education 1st cycle (4th/5th year) or equiv.",
        3: "7th year of schooling",
        4: "7th Year (Old)",
        5: "Basic Education 2nd Cycle (6th/7th/8th Year) or Equiv.",
        6: "8th year of schooling",
        7: "2nd cycle of the general high school course",
        8: "9th Year of Schooling - Not Completed",
        9: "Basic Education 3rd Cycle (9th/10th/11th Year) or Equiv.",
        10: "10th Year of Schooling",
        11: "11th Year of Schooling - Not Completed",
        12: "Other - 11th Year of Schooling",
        13: "12th Year of Schooling - Not Completed",
        14: "Secondary Education - 12th Year of Schooling or Eq.",
        15: "General commerce course",
        16: "Technical-professional course",
        17: "Frequency of Higher Education",
        18: "Technological specialization course",
        19: "Professional higher technical course",
        20: "Specialized higher studies course",
        21: "Higher education - degree (1st cycle)",
        22: "Higher Education - Bachelor's Degree",
        23: "Higher Education - Degree",
        24: "Higher Education - Master (2nd cycle)",
        25: "Higher Education - Master's",
        26: "Higher Education - Doctorate (3rd cycle)",
        27: "Higher Education - Doctorate",
        28: "Unknown"
    },
    'fathers_qualification': {
        0: "Can't read or write",
        1: "Can read without having a 4th year of schooling",
        2: "Basic education 1st cycle (4th/5th year) or equiv.",
        3: "7th year of schooling",
        4: "7th Year (Old)",
        5: "Basic Education 2nd Cycle (6th/7th/8th Year) or Equiv.",
        6: "8th year of schooling",
        7: "9th Year of Schooling - Not Completed",
        8: "Basic Education 3rd Cycle (9th/10th/11th Year) or Equiv.",
        9: "10th Year of Schooling",
        10: "11th Year of Schooling - Not Completed",
        11: "Other - 11th Year of Schooling",
        12: "12th Year of Schooling - Not Completed",
        13: "Secondary Education - 12th Year of Schooling or Eq.",
        14: "General commerce course",
        15: "General Course of Administration and Commerce",
        16: "Technical-professional course",
        17: "2nd cycle of the general high school course",
        18: "2nd year complementary high school course",
        19: "Complementary High School Course",
        20: "Complementary High School Course - not concluded",
        21: "Supplementary Accounting and Administration",
        22: "Frequency of Higher Education",
        23: "Technological specialization course",
        24: "Professional higher technical course",
        25: "Specialized higher studies course",
        26: "Higher education - degree (1st cycle)",
        27: "Higher Education - Bachelor's Degree",
        28: "Higher Education - Degree",
        29: "Higher Education - Master (2nd cycle)",
        30: "Higher Education - Master's",
        31: "Higher Education - Doctorate (3rd cycle)",
        32: "Higher Education - Doctorate",
        33: "Unknown"
    },
    'mothers_occupation': {
        0: "Student",
        1: "Representatives of the Legislative Power and Executive Bodies, Directors, Directors and Executive Managers",
        2: "Specialists in Intellectual and Scientific Activities",
        3: "Health professionals",
        4: "Teachers",
        5: "Specialists in information and communication technologies (ICT)",
        6: "Intermediate level science and engineering technicians and professions",
        7: "Technicians and professionals, of intermediate level of health",
        8: "Intermediate level technicians from legal, social, sports, cultural and similar services",
        9: "Intermediate Level Technicians and Professions",
        10: "Office workers, secretaries in general and data processing operators",
        11: "Data, accounting, statistical, financial services and registry-related operators",
        12: "Other administrative support staff",
        13: "Administrative staff",
        14: "Personal service workers",
        15: "Sellers",
        16: "Personal Services, Security and Safety Workers and Sellers",
        17: "Personal care workers and the like",
        18: "Meal preparation assistants",
        19: "Cleaning workers",
        20: "Skilled construction workers and the like, except electricians",
        21: "Skilled workers in printing, precision instrument manufacturing, jewelers, artisans and the like",
        22: "Workers in food processing, woodworking, clothing and other industries and crafts",
        23: "Skilled Workers in Industry, Construction and Craftsmen",
        24: "Farmers and Skilled Workers in Agriculture, Fisheries and Forestry",
        25: "Installation and Machine Operators and Assembly Workers",
        26: "Unskilled workers in agriculture, animal production, fisheries and forestry",
        27: "Unskilled workers in extractive industry, construction, manufacturing and transport",
        28: "Unskilled Workers",
        29: "Armed Forces Professions",
        30: "Other Situation",
        31: "(blank)"
    },
    'fathers_occupation': {
        0: "Student",
        1: "Representatives of the Legislative Power and Executive Bodies, Directors, Directors and Executive Managers",
        2: "Directors of administrative and commercial services",
        3: "Hotel, catering, trade and other services directors",
        4: "Specialists in the physical sciences, mathematics, engineering and related techniques",
        5: "Health professionals",
        6: "Teachers",
        7: "Specialists in finance, accounting, administrative organization, public and commercial relations",
        8: "Specialists in Intellectual and Scientific Activities",
        9: "Intermediate level science and engineering technicians and professions",
        10: "Technicians and professionals, of intermediate level of health",
        11: "Intermediate level technicians from legal, social, sports, cultural and similar services",
        12: "Information and communication technology technicians",
        13: "Intermediate Level Technicians and Professions",
        14: "Office workers, secretaries in general and data processing operators",
        15: "Data, accounting, statistical, financial services and registry-related operators",
        16: "Other administrative support staff",
        17: "Administrative staff",
        18: "Personal service workers",
        19: "Sellers",
        20: "Personal care workers and the like",
        21: "Protection and security services personnel",
        22: "Personal Services, Security and Safety Workers and Sellers",
        23: "Market-oriented farmers and skilled agricultural and animal production workers",
        24: "Farmers, livestock keepers, fishermen, hunters and gatherers, subsistence",
        25: "Farmers and Skilled Workers in Agriculture, Fisheries and Forestry",
        26: "Skilled construction workers and the like, except electricians",
        27: "Skilled workers in metallurgy, metalworking and similar",
        28: "Skilled workers in electricity and electronics",
        29: "Workers in food processing, woodworking, clothing and other industries and crafts",
        30: "Skilled Workers in Industry, Construction and Craftsmen",
        31: "Fixed plant and machine operators",
        32: "Assembly workers",
        33: "Vehicle drivers and mobile equipment operators",
        34: "Installation and Machine Operators and Assembly Workers",
        35: "Unskilled workers in agriculture, animal production, fisheries and forestry",
        36: "Unskilled workers in extractive industry, construction, manufacturing and transport",
        37: "Unskilled Workers",
        38: "Meal preparation assistants",
        39: "Street vendors (except food) and street service providers",
        40: "Armed Forces Officers",
        41: "Armed Forces Sergeants",
        42: "Other Armed Forces personnel",
        43: "Armed Forces Professions",
        44: "Other Situation",
        45: "(blank)"
    },
    'displaced': {0: "No", 1: "Yes"},
    'debtor': {0: "No", 1: "Yes"},
    'tuition_fees_up_to_date': {0: "No", 1: "Yes"},
    'gender': {0: "Female", 1: "Male"},
    'scholarship_holder': {0: "No", 1: "Yes"}
}

def main():
    st.markdown('<h1 class="main-header">🎓 Student Outcome Predictor</h1>', unsafe_allow_html=True)

    st.markdown("""
    This application predicts student outcomes (**Enrolled**, **Dropout**, or **Graduate**) based on various academic and demographic factors.
    Please fill in the information below to get a prediction.
    """)

    # Create tabs
    tab1, tab2 = st.tabs(["📝 Make Prediction", "📊 Model Information"])

    with tab1:
        st.markdown("### Enter Student Information")

        # Create columns for organized layout
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("📚 Academic Information")

            # Application Mode
            app_mode_options = list(categorical_mappings['application_mode'].values())
            app_mode_selected = st.selectbox(
                "Application Mode",
                options=app_mode_options,
                help="The method of application used by the student"
            )
            app_mode_value = [k for k, v in categorical_mappings['application_mode'].items() if v == app_mode_selected][0]

            # Application Order (numerical but limited range)
            application_order = st.slider(
                "Application Order",
                min_value=0, max_value=9, value=0,
                help="Order of application preference (0 = first choice, 9 = last choice)"
            )

            # Daytime/Evening Attendance
            attendance_options = list(categorical_mappings['daytime_evening_attendance'].values())
            attendance_selected = st.selectbox("Daytime/Evening Attendance", options=attendance_options)
            attendance_value = [k for k, v in categorical_mappings['daytime_evening_attendance'].items() if v == attendance_selected][0]

            # Previous Qualification
            prev_qual_options = list(categorical_mappings['previous_qualification'].values())
            prev_qual_selected = st.selectbox(
                "Previous Qualification",
                options=prev_qual_options,
                help="The qualification obtained before enrolling in higher education"
            )
            prev_qual_value = [k for k, v in categorical_mappings['previous_qualification'].items() if v == prev_qual_selected][0]

            # Previous qualification grade
            prev_qual_grade = st.number_input(
                "Previous Qualification Grade",
                min_value=0.0, max_value=200.0, value=120.0, step=0.1,
                help="Grade of previous qualification (0-200 scale)"
            )

            # Admission grade
            admission_grade = st.number_input(
                "Admission Grade",
                min_value=0.0, max_value=200.0, value=120.0, step=0.1,
                help="Grade at admission (0-200 scale)"
            )

            # Age at enrollment
            age_enrollment = st.number_input(
                "Age at Enrollment",
                min_value=16, max_value=80, value=20,
                help="Student's age when enrolled"
            )

        with col2:
            st.subheader("👨‍👩‍👧‍👦 Family Information")

            # Mother's Qualification
            mother_qual_options = list(categorical_mappings['mothers_qualification'].values())
            mother_qual_selected = st.selectbox("Mother's Qualification", options=mother_qual_options)
            mother_qual_value = [k for k, v in categorical_mappings['mothers_qualification'].items() if v == mother_qual_selected][0]

            # Father's Qualification
            father_qual_options = list(categorical_mappings['fathers_qualification'].values())
            father_qual_selected = st.selectbox("Father's Qualification", options=father_qual_options)
            father_qual_value = [k for k, v in categorical_mappings['fathers_qualification'].items() if v == father_qual_selected][0]

            # Mother's Occupation
            mother_occ_options = list(categorical_mappings['mothers_occupation'].values())
            mother_occ_selected = st.selectbox("Mother's Occupation", options=mother_occ_options)
            mother_occ_value = [k for k, v in categorical_mappings['mothers_occupation'].items() if v == mother_occ_selected][0]

            # Father's Occupation
            father_occ_options = list(categorical_mappings['fathers_occupation'].values())
            father_occ_selected = st.selectbox("Father's Occupation", options=father_occ_options)
            father_occ_value = [k for k, v in categorical_mappings['fathers_occupation'].items() if v == father_occ_selected][0]

        st.subheader("🏠 Personal & Financial Information")
        col3, col4, col5 = st.columns(3)

        with col3:
            # Displaced
            displaced_options = list(categorical_mappings['displaced'].values())
            displaced_selected = st.selectbox("Displaced", options=displaced_options)
            displaced_value = [k for k, v in categorical_mappings['displaced'].items() if v == displaced_selected][0]

            # Debtor
            debtor_options = list(categorical_mappings['debtor'].values())
            debtor_selected = st.selectbox("Debtor", options=debtor_options)
            debtor_value = [k for k, v in categorical_mappings['debtor'].items() if v == debtor_selected][0]

        with col4:
            # Tuition fees up to date
            tuition_options = list(categorical_mappings['tuition_fees_up_to_date'].values())
            tuition_selected = st.selectbox("Tuition Fees Up to Date", options=tuition_options)
            tuition_value = [k for k, v in categorical_mappings['tuition_fees_up_to_date'].items() if v == tuition_selected][0]

            # Gender
            gender_options = list(categorical_mappings['gender'].values())
            gender_selected = st.selectbox("Gender", options=gender_options)
            gender_value = [k for k, v in categorical_mappings['gender'].items() if v == gender_selected][0]

        with col5:
            # Scholarship holder
            scholarship_options = list(categorical_mappings['scholarship_holder'].values())
            scholarship_selected = st.selectbox("Scholarship Holder", options=scholarship_options)
            scholarship_value = [k for k, v in categorical_mappings['scholarship_holder'].items() if v == scholarship_selected][0]

        st.subheader("📈 Academic Performance")
        col6, col7 = st.columns(2)

        with col6:
            st.write("**First Semester:**")
            units_1st_credited = st.number_input("Curricular Units 1st Sem Credited", min_value=0, max_value=30, value=0)
            units_1st_enrolled = st.number_input("Curricular Units 1st Sem Enrolled", min_value=0, max_value=30, value=6)
            units_1st_evaluations = st.number_input("Curricular Units 1st Sem Evaluations", min_value=0, max_value=30, value=6)
            units_1st_approved = st.number_input("Curricular Units 1st Sem Approved", min_value=0, max_value=30, value=6)
            units_1st_grade = st.number_input("Curricular Units 1st Sem Grade", min_value=0.0, max_value=20.0, value=12.0, step=0.1)
            units_1st_without_eval = st.number_input("Curricular Units 1st Sem Without Evaluations", min_value=0, max_value=30, value=0)

        with col7:
            st.write("**Second Semester:**")
            units_2nd_credited = st.number_input("Curricular Units 2nd Sem Credited", min_value=0, max_value=30, value=0)
            units_2nd_enrolled = st.number_input("Curricular Units 2nd Sem Enrolled", min_value=0, max_value=30, value=6)
            units_2nd_evaluations = st.number_input("Curricular Units 2nd Sem Evaluations", min_value=0, max_value=30, value=6)
            units_2nd_approved = st.number_input("Curricular Units 2nd Sem Approved", min_value=0, max_value=30, value=6)
            units_2nd_grade = st.number_input("Curricular Units 2nd Sem Grade", min_value=0.0, max_value=20.0, value=12.0, step=0.1)
            units_2nd_without_eval = st.number_input("Curricular Units 2nd Sem Without Evaluations", min_value=0, max_value=30, value=0)

        # Unemployment rate
        unemployment_rate = st.number_input(
            "Unemployment Rate",
            min_value=0.0, max_value=100.0, value=10.0, step=0.1,
            help="Economic indicator - unemployment rate (%)"
        )

        # Predict button
        if st.button("🔮 Predict Student Outcome", type="primary", use_container_width=True):
            # Prepare input data - need to match the exact column order from training
            input_data = {
                # Numerical features first
                'previous_qualification_grade': prev_qual_grade,
                'admission_grade': admission_grade,
                'age_at_enrollment': age_enrollment,
                'curricular_units_1st_sem_credited': units_1st_credited,
                'curricular_units_1st_sem_enrolled': units_1st_enrolled,
                'curricular_units_1st_sem_evaluations': units_1st_evaluations,
                'curricular_units_1st_sem_approved': units_1st_approved,
                'curricular_units_1st_sem_grade': units_1st_grade,
                'curricular_units_1st_sem_without_evaluations': units_1st_without_eval,
                'curricular_units_2nd_sem_credited': units_2nd_credited,
                'curricular_units_2nd_sem_enrolled': units_2nd_enrolled,
                'curricular_units_2nd_sem_evaluations': units_2nd_evaluations,
                'curricular_units_2nd_sem_approved': units_2nd_approved,
                'curricular_units_2nd_sem_grade': units_2nd_grade,
                'curricular_units_2nd_sem_without_evaluations': units_2nd_without_eval,
                'unemployment_rate': unemployment_rate,
                # Encoded categorical features
                'application_mode_encoded': app_mode_value,
                'application_order_encoded': application_order,
                'daytime_evening_attendance_encoded': attendance_value,
                'previous_qualification_encoded': prev_qual_value,
                'fathers_qualification_encoded': father_qual_value,
                'mothers_occupation_encoded': mother_occ_value,
                'fathers_occupation_encoded': father_occ_value,
                'displaced_encoded': displaced_value,
                'debtor_encoded': debtor_value,
                'tuition_fees_up_to_date_encoded': tuition_value,
                'gender_encoded': gender_value,
                'scholarship_holder_encoded': scholarship_value
            }

            # Create DataFrame
            input_df = pd.DataFrame([input_data])

            # Make prediction
            try:
                prediction = pipeline.predict(input_df)[0]
                probabilities = pipeline.predict_proba(input_df)[0]

                # Display results
                st.markdown("## 🎯 Prediction Results")

                # Map prediction to label
                prediction_labels = {0: 'Enrolled', 1: 'Dropout', 2: 'Graduate'}
                predicted_outcome = prediction_labels[prediction]

                # Create prediction boxes
                if predicted_outcome == 'Enrolled':
                    st.markdown(f'<div class="prediction-box enrolled"><h2>🟢 Predicted Outcome: {predicted_outcome}</h2><p>The student is likely to remain <strong>enrolled</strong> in the program.</p></div>', unsafe_allow_html=True)
                elif predicted_outcome == 'Dropout':
                    st.markdown(f'<div class="prediction-box dropout"><h2>🔴 Predicted Outcome: {predicted_outcome}</h2><p>The student is at risk of <strong>dropping out</strong> from the program.</p></div>', unsafe_allow_html=True)
                else:  # Graduate
                    st.markdown(f'<div class="prediction-box graduate"><h2>🔵 Predicted Outcome: {predicted_outcome}</h2><p>The student is likely to <strong>graduate</strong> successfully.</p></div>', unsafe_allow_html=True)

                # Show probabilities
                col1, col2, col3 = st.columns(3)

                with col1:
                    st.markdown(f'''
                    <div class="metric-box enrolled-metric">
                        <h4>Enrolled</h4>
                        <h2>{probabilities[0]:.1%}</h2>
                    </div>
                    ''', unsafe_allow_html=True)
                with col2:
                    st.markdown(f'''
                    <div class="metric-box dropout-metric">
                        <h4>Dropout</h4>
                        <h2>{probabilities[1]:.1%}</h2>
                    </div>
                    ''', unsafe_allow_html=True)
                with col3:
                    st.markdown(f'''
                    <div class="metric-box graduate-metric">
                        <h4>Graduate</h4>
                        <h2>{probabilities[2]:.1%}</h2>
                    </div>
                    ''', unsafe_allow_html=True)

                # Create probability chart
                prob_df = pd.DataFrame({
                    'Outcome': ['Enrolled', 'Dropout', 'Graduate'],
                    'Probability': probabilities
                })

                fig = px.bar(prob_df, x='Outcome', y='Probability',
                           title='Prediction Probabilities',
                           color='Outcome',
                           color_discrete_map={'Enrolled': '#28a745', 'Dropout': '#dc3545', 'Graduate': '#17a2b8'})
                fig.update_layout(
                    showlegend=False,
                    yaxis_title="Probability",
                    yaxis=dict(range=[0, 1])
                )
                st.plotly_chart(fig, use_container_width=True)

                # Confidence interpretation
                max_prob = max(probabilities)
                if max_prob > 0.8:
                    confidence_level = "Very High"
                    confidence_color = "green"
                elif max_prob > 0.6:
                    confidence_level = "High"
                    confidence_color = "blue"
                elif max_prob > 0.4:
                    confidence_level = "Moderate"
                    confidence_color = "orange"
                else:
                    confidence_level = "Low"
                    confidence_color = "red"

                st.markdown(f"**Prediction Confidence:** <span style='color:{confidence_color}'>{confidence_level} ({max_prob:.1%})</span>", unsafe_allow_html=True)

            except Exception as e:
                st.error(f"Error making prediction: {str(e)}")
                st.error("Please check that all required model files are present and try again.")

    with tab2:
        st.subheader("📊 Model Information")

        col1, col2 = st.columns(2)

        with col1:
            st.metric("Best Model", model_info.get('best_model_name', 'Unknown'))
            st.metric("Model Accuracy", f"{model_info.get('best_score', 0):.1%}")

        with col2:
            st.metric("Total Features", len(model_info.get('all_feature_columns', [])))
            st.metric("Categorical Features", len(model_info.get('categorical_columns', [])))

        st.subheader("🎯 Target Classes")
        st.markdown("""
        - **Enrolled (0)**: Student is currently enrolled and continuing studies
        - **Dropout (1)**: Student has dropped out of the program
        - **Graduate (2)**: Student has successfully completed the program
        """)

        if 'classification_metrics' in model_info:
            st.subheader("📈 Model Performance")
            metrics = model_info['classification_metrics']
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.metric("Accuracy", f"{metrics.get('accuracy', 0):.3f}")
            with col2:
                st.metric("F1 Score", f"{metrics.get('f1_score', 0):.3f}")
            with col3:
                st.metric("ROC AUC", f"{metrics.get('roc_auc', 0):.3f}")
            with col4:
                st.metric("CV Score", f"{metrics.get('cv_score', 0):.3f}")

if __name__ == "__main__":
    main()